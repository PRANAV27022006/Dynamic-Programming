//** Subset Sum Problem Based On 0-1KnapSack Problem**//
#include <bits/stdc++.h>
using namespace std;

bool subsetSum(int arr[], int n, int sum) {
    bool dp[n + 1][sum + 1];

    //  Initialization (base condition)
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= sum; j++) {
            if (i == 0)
                dp[i][j] = false;  // no elements → can't form any sum except 0
            if (j == 0)
                dp[i][j] = true;   // sum 0 → always possible (empty subset)
        }
    }

    // Build the table
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= sum; j++) {
            if (arr[i - 1] <= j) {
                dp[i][j] = dp[i - 1][j - arr[i - 1]] || dp[i - 1][j];
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }

    // At Last Index Final answer
    return dp[n][sum];
}

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;

    int arr[n];
    cout << "Enter array elements: ";
    for (int i = 0; i < n; i++) cin >> arr[i];

    int sum;
    cout << "Enter target sum: ";
    cin >> sum;

    if (subsetSum(arr, n, sum))
        cout << "Subset with given sum exists " << endl;
    else
        cout << "No subset with given sum " << endl;

    return 0;
}
