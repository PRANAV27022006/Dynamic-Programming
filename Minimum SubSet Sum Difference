//**Minimum SubSet Sum Difference Based on 0-1 KnapSack Problem**//
#include <bits/stdc++.h>
using namespace std;

int minSubsetSumDifference(vector<int>& arr) {
    int n = arr.size();
    int totalSum = accumulate(arr.begin(), arr.end(), 0);

    // DP to find all possible subset sums
    bool dp[n+1][totalSum+1];

    // Initialization
    for(int i=0; i<=n; i++)
        dp[i][0] = true; // sum = 0 is always possible
    for(int j=1; j<=totalSum; j++)
        dp[0][j] = false; // no elements â†’ no positive sum

    // DP filling
    for(int i=1; i<=n; i++) {
        for(int j=1; j<=totalSum; j++) {
            if(arr[i-1] <= j)
                dp[i][j] = dp[i-1][j - arr[i-1]] || dp[i-1][j];
            else
                dp[i][j] = dp[i-1][j];
        }
    }

    // Find the minimum difference
    int minDiff = INT_MAX;
    for(int s1 = 0; s1 <= totalSum / 2; s1++) {
        if(dp[n][s1]) {
            int s2 = totalSum - s1;
            minDiff = min(minDiff, abs(s2 - s1));
        }
    }

    return minDiff;
}

int main() {
    vector<int> arr = {1, 2, 7};
    cout << "Minimum subset sum difference: " 
         << minSubsetSumDifference(arr);
    return 0;
}
