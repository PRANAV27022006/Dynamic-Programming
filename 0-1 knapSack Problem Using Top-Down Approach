#include <bits/stdc++.h>
using namespace std;

int knapsack(int wt[], int val[], int W, int n) {
    int dp[n + 1][W + 1];

    // Initialization (base condition)
    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= W; j++) {
            if (i == 0 || j == 0)
                dp[i][j] = 0;
        }
    }

    // Build the DP table (Bottom-Up)
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= W; j++) {
            if (wt[i - 1] <= j) {
                dp[i][j] = max(
                    val[i - 1] + dp[i - 1][j - wt[i - 1]],
                    dp[i - 1][j]
                );
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }

    // answer at the last row and col
    return dp[n][W];
}

int main() {
    int n;
    cout << "Enter number of items: ";
    cin >> n;

    int wt[n], val[n];
    cout << "Enter weights: ";
    for (int i = 0; i < n; i++) cin >> wt[i];

    cout << "Enter values: ";
    for (int i = 0; i < n; i++) cin >> val[i];

    int W;
    cout << "Enter knapsack capacity: ";
    cin >> W;

    cout << "Maximum Profit = " << knapsack(wt, val, W, n) << endl;

    return 0;
}
