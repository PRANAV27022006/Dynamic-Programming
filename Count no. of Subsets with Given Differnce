//**Count no. of Subsets with Given Differnce Based on 0-1 KnapSack Problem**//
#include <bits/stdc++.h>
using namespace std;

// Function to count subsets with a given sum
int countSubsetSum(vector<int>& arr, int sum) {
    int n = arr.size();
    int dp[n+1][sum+1];

    // Initialization
    for(int i=0; i<=n; i++)
        dp[i][0] = 1; 
    for(int j=1; j<=sum; j++)
        dp[0][j] = 0; 

 
    for(int i=1; i<=n; i++) {
        for(int j=0; j<=sum; j++) {
            if(arr[i-1] <= j)
                dp[i][j] = dp[i-1][j - arr[i-1]] + dp[i-1][j];
            else
                dp[i][j] = dp[i-1][j];
        }
    }

    return dp[n][sum];
}

// Main function to count subsets with given difference
int countSubsetsWithDiff(vector<int>& arr, int diff) {
    int totalSum = accumulate(arr.begin(), arr.end(), 0);

    // Check for valid S1
    if((diff + totalSum) % 2 != 0)
        return 0;

    int S1 = (diff + totalSum) / 2;

    return countSubsetSum(arr, S1);
}

int main() {
    vector<int> arr = {1, 1, 2, 3};
    int diff = 1;

    cout << "Count of subsets with given difference: "
         << countSubsetsWithDiff(arr, diff);
    return 0;
}
