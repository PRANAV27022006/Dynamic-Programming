//**Count of Subsets with Given Sum Based on 0-1 KnapSack Problem**//
#include <bits/stdc++.h>
using namespace std;

int countSubsets(int arr[], int n, int sum) {
    int dp[n + 1][sum + 1];

    // Initialization (base condition)
    // When sum == 0 → only one subset possible (empty subset)
    for (int i = 0; i <= n; i++)
        dp[i][0] = 1;

    // When no elements → no subset can make positive sum
    for (int j = 1; j <= sum; j++)
        dp[0][j] = 0;

    // Build the table (bottom-up)
    for (int i = 1; i <= n; i++) {
        for (int j = 0; j <= sum; j++) {
            if (arr[i - 1] <= j) {
                dp[i][j] = dp[i - 1][j - arr[i - 1]] + dp[i - 1][j];
            } else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }

    //  From at The Last Index Return result
    return dp[n][sum];
}

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;

    int arr[n];
    cout << "Enter array elements: ";
    for (int i = 0; i < n; i++)
        cin >> arr[i];

    int sum;
    cout << "Enter target sum: ";
    cin >> sum;

    cout << "Count of subsets with given sum = " << countSubsets(arr, n, sum) << endl;

    return 0;
}
